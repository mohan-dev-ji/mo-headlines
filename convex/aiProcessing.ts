import { mutation } from "./_generated/server";
import { v } from "convex/values";
import { Id } from "./_generated/dataModel";

// Perplexity API configuration
const PERPLEXITY_API_URL = "https://api.perplexity.ai/chat/completions";

interface PerplexityResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

interface ProcessedArticle {
  title: string;
  body: string;
  excerpt: string;
  category: string;
  sourceUrls: string[];
  imagePrompt: string;
}

// Process queue item through Perplexity AI
export const processQueueItemWithAI = mutation({
  args: { 
    queueItemId: v.id("rss_queue")
  },
  handler: async (ctx, args) => {
    const identity = await ctx.auth.getUserIdentity();
    if (!identity) {
      throw new Error("Not authenticated");
    }

    // Get the queue item with producer details
    const queueItem = await ctx.db.get(args.queueItemId);
    if (!queueItem) {
      throw new Error("Queue item not found");
    }

    const producer = await ctx.db.get(queueItem.producerId);
    if (!producer) {
      throw new Error("Producer not found");
    }

    // Check if item is already processing or completed
    if (queueItem.status === "processing") {
      throw new Error("Item is already being processed");
    }
    if (queueItem.status === "completed") {
      throw new Error("Item has already been processed");
    }

    try {
      // Update status to processing
      await ctx.db.patch(args.queueItemId, {
        status: "processing",
      });

      // Call Perplexity AI for fact-checking and article generation
      const processedArticle = await processWithPerplexity({
        title: queueItem.title,
        description: queueItem.description,
        originalUrl: queueItem.url,
        publishedAt: queueItem.publishedAt,
        categories: queueItem.categories || [],
        producerName: producer.name
      });

      // Get category ID for the processed article
      const category = await ctx.db
        .query("categories")
        .filter((q) => q.eq(q.field("name"), processedArticle.category))
        .first();
      
      if (!category) {
        throw new Error(`Category '${processedArticle.category}' not found`);
      }

      // Generate slug from title
      const slug = generateSlug(processedArticle.title);

      // Create the AI-generated article
      const articleId = await ctx.db.insert("articles", {
        title: processedArticle.title,
        body: processedArticle.body,
        excerpt: processedArticle.excerpt,
        categoryId: category._id,
        topicIds: [], // TODO: Add topic extraction in future
        authorId: "ai-system", // System-generated content
        status: "pending", // Requires admin approval
        isAutoGenerated: true,
        isEdited: false,
        sourceUrls: processedArticle.sourceUrls,
        rssSourceOrigin: [producer.name],
        viewCount: 0,
        slug,
      });

      // Update queue item as completed
      await ctx.db.patch(args.queueItemId, {
        status: "completed",
        processed: true,
        processedAt: Date.now(),
        generatedArticleId: articleId,
      });

      return {
        success: true,
        queueItemId: args.queueItemId,
        articleId,
        status: "completed"
      };

    } catch (error) {
      // Update status to failed and record error
      const retryCount = (queueItem.retryCount || 0) + 1;
      
      await ctx.db.patch(args.queueItemId, {
        status: "failed",
        errorMessage: error instanceof Error ? error.message : "Unknown error",
        retryCount,
      });

      throw error;
    }
  },
});

// Process article content with Perplexity AI
async function processWithPerplexity(articleData: {
  title: string;
  description: string;
  originalUrl: string;
  publishedAt: number;
  categories: string[];
  producerName: string;
}): Promise<ProcessedArticle> {
  
  // Check if API key is configured
  const apiKey = process.env.PERPLEXITY_API_KEY;
  if (!apiKey) {
    throw new Error("Perplexity API key not configured. Please add PERPLEXITY_API_KEY to your environment variables.");
  }

  const prompt = `You are a professional tech journalist tasked with fact-checking and rewriting news articles. 

ORIGINAL ARTICLE:
Title: ${articleData.title}
Description: ${articleData.description}
Source: ${articleData.producerName}
URL: ${articleData.originalUrl}
Published: ${new Date(articleData.publishedAt).toISOString()}
RSS Categories: ${articleData.categories.join(", ")}

TASK:
1. Use your research capabilities to find 3-5 reputable sources reporting on this same story
2. Fact-check the key claims against these sources
3. Write a well-balanced, journalistic article that synthesizes the information
4. Identify any conflicting reports or uncertain details
5. Create a compelling excerpt and image generation prompt

REQUIREMENTS:
- Article should be 400-800 words
- Use professional, objective tone
- Include specific facts, dates, and figures when available
- Cite discrepancies between sources if they exist
- Focus on factual accuracy over sensationalism

RESPONSE FORMAT (JSON):
{
  "title": "Improved title for the article",
  "body": "Full article content in markdown format",
  "excerpt": "2-3 sentence summary for preview",
  "category": "One of: AI, Robotics, Biotech, Crypto, EVs",
  "sourceUrls": ["url1", "url2", "url3"],
  "imagePrompt": "Detailed prompt for AI image generation"
}`;

  try {
    const response = await fetch(PERPLEXITY_API_URL, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "llama-3.1-sonar-huge-128k-online",
        messages: [
          {
            role: "system",
            content: "You are a professional tech journalist with access to real-time web search. Respond only with valid JSON."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.3,
        max_tokens: 2000,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Perplexity API error: ${response.status} - ${errorText}`);
    }

    const data: PerplexityResponse = await response.json();
    
    if (!data.choices || data.choices.length === 0) {
      throw new Error("No response from Perplexity API");
    }

    const content = data.choices[0].message.content;
    
    // Parse the JSON response
    let processedArticle: ProcessedArticle;
    try {
      processedArticle = JSON.parse(content);
    } catch (parseError) {
      throw new Error(`Failed to parse Perplexity response as JSON: ${content}`);
    }

    // Validate required fields
    if (!processedArticle.title || !processedArticle.body || !processedArticle.category) {
      throw new Error("Missing required fields in Perplexity response");
    }

    return processedArticle;

  } catch (error) {
    console.error("Perplexity API processing error:", error);
    throw new Error(`AI processing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

// Generate URL-friendly slug from title
function generateSlug(title: string): string {
  return title
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '')
    .substring(0, 60); // Limit length
}