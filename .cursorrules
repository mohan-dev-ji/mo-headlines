# Mo Headlines - AI-Verified Tech News Platform

## Project Overview

**Mission:** Deliver AI-verified tech news by automatically fact-checking stories across multiple sources, ensuring readers get accurate, balanced reporting on breaking developments.

**Core Value Proposition:** Every story is automatically cross-referenced against 3+ sources using AI to identify common facts, eliminate bias, and present balanced perspectives - solving the problem of conflicting reports and misinformation in fast-moving tech news.

**Target Users:**
- Primary: Tech professionals (developers, PMs, investors) needing accurate news quickly
- Secondary: Tech enthusiasts tired of clickbait and conflicting reports
- Use cases: Morning briefings, work research, staying informed without doom-scrolling

## Technical Stack

**Frontend:**
- Next.js 15.3 (App Router)
- React with TypeScript
- Tailwind CSS + Radix UI + shadcn/ui
- Lucide React (icons)
- Zod (validation)

**Backend & Database:**
- Convex (database & backend functions)
- Clerk (authentication)
- Perplexity Pro API (AI research)
- rss-parser (RSS feed processing)

**Infrastructure:**
- Hosting: Vercel
- File Storage: Convex file storage

## Core Features & Architecture

### 1. RSS Source Management
- Admin creates RSS sources with polling frequency
- System automatically polls feeds for new articles
- Articles filtered by category and processed through AI pipeline

### 2. AI Fact-Checking Pipeline
1. RSS item selected for processing
2. Perplexity API searches for 3+ related articles
3. AI synthesizes common themes using custom prompts
4. Generated article stored for admin review
5. Admin approves/edits/rejects before publishing

### 3. User Experience
- Browse latest verified headlines
- Filter by categories and topic tags
- Read full synthesized articles with source citations
- Comment and like system (requires authentication)
- User profiles with comment/like history

### 4. Admin Dashboard
- RSS source creation and management
- Article review and approval workflow
- Analytics and performance metrics
- Settings configuration
- Prompt management for AI generation

## Database Schema (Convex)

```typescript
// Core content tables
articles: {
  _id: Id<"articles">
  title: string
  content: string
  imageStorageId?: Id<"_storage">
  excerpt?: string
  category: string
  topics: string[]
  status: "draft" | "pending" | "approved" | "rejected"
  isAutoGenerated: boolean
  isEdited: boolean
  sourceUrls: string[]
  rssSourceOrigin: string[]
  viewCount: number
  publishedAt?: number
  createdAt: number
  updatedAt: number
  authorId?: Id<"users">
  slug: string
}

rss_sources: {
  _id: Id<"rss_sources">
  name: string
  url: string
  category: string
  isActive: boolean
  pollFrequency: number
  numberOfArticles: number
  lastPolled?: number
  createdAt: number
}

rss_items: {
  _id: Id<"rss_items">
  sourceId: Id<"rss_sources">
  title: string
  description: string
  url: string
  publishedAt: number
  processed: boolean
  createdAt: number
}

// User interaction tables
comments: {
  _id: Id<"comments">
  articleId: Id<"articles">
  userId: string
  content: string
  createdAt: number
  updatedAt?: number
  isApproved: boolean
}

users: {
  _id: Id<"users">
  clerkId: string
  username?: string
  createdAt: number
  updatedAt?: number
}

// Configuration tables
categories: {
  _id: Id<"categories">
  name: string
  description: string
  slug: string
  isActive: boolean
}

topics: {
  _id: Id<"topics">
  name: string
  category: string
  slug: string
  isActive: boolean
}

prompts: {
  _id: Id<"prompts">
  type: "research" | "synthesis" | "factcheck"
  content: string
  isActive: boolean
  createdAt: number
  updatedAt?: number
}
```

## Page Structure & Routing

**Public Pages:**
- `/` - Home page with latest headlines
- `/article/[slug]` - Individual article view with comments
- `/search/[category]` - Filtered articles by category/topic
- `/profile/[userId]` - User profile with comments and liked articles

**Admin Dashboard (`/admin/`):**
- `/admin/rss-sources` - Create and manage RSS sources
- `/admin/articles` - Review, approve, edit generated articles
- `/admin/analytics` - Performance metrics and insights
- `/admin/settings` - System configuration
- `/admin/prompts` - Manage AI prompts

## Development Guidelines

### Code Style & Patterns

**TypeScript First:** All components, functions, and API routes must use TypeScript with proper type definitions.

**Component Structure:**
```typescript
interface ComponentProps {
  // Define all props with types
}

export default function ComponentName({ prop1, prop2 }: ComponentProps) {
  // 1. Hooks (useState, useEffect, custom hooks)
  // 2. Derived state and computed values
  // 3. Event handlers
  // 4. Early returns for loading/error states
  // 5. Main JSX return
}
```

**Naming Conventions:**
- Components: PascalCase (`ArticleCard`, `RssSourceForm`)
- Files: kebab-case (`article-card.tsx`, `rss-source-form.tsx`)
- Functions: camelCase (`handleSubmit`, `fetchArticles`)
- Constants: SCREAMING_SNAKE_CASE (`API_ENDPOINTS`, `MAX_ARTICLES`)

### File Organization

```
/app
  /(auth)           # Auth-related pages
  /(public)         # Public pages
  /admin           # Admin dashboard
  /api             # API routes
  /globals.css     # Global styles
  /layout.tsx      # Root layout
/components
  /ui              # shadcn/ui components
  /admin           # Admin-specific components
  /common          # Shared components
/lib
  /convex          # Convex utilities
  /utils.ts        # General utilities
  /types.ts        # Shared TypeScript types
/convex            # Convex schema and functions
```

### State Management

**Convex Queries:** Use Convex's reactive queries for real-time data fetching
```typescript
const articles = useQuery(api.articles.getPublished);
```

**Form State:** Use React Hook Form with Zod schemas
```typescript
const form = useForm<FormData>({
  resolver: zodResolver(schema),
  defaultValues: {...}
});
```

**Component State:** useState for local component state, useEffect for side effects

### Error Handling

**API Routes:** Always return structured error responses
```typescript
return NextResponse.json(
  { error: "Descriptive error message", code: "ERROR_CODE" },
  { status: 400 }
);
```

**Components:** Implement error boundaries and loading states
```typescript
if (isLoading) return <LoadingSpinner />;
if (error) return <ErrorMessage error={error} />;
```

### Security & Performance

**Authentication:** 
- Use Clerk for user authentication
- Protect admin routes with middleware
- Validate user permissions in API routes

**Data Validation:**
- Use Zod schemas for all form inputs
- Validate data at API boundaries
- Sanitize user-generated content

**Performance:**
- Use Next.js Image component for optimized images
- Implement proper loading states
- Use Convex subscriptions for real-time updates
- Lazy load components where appropriate

### Third-Party Integrations

**Perplexity API:**
- Store prompts in database for easy modification
- Implement retry logic with exponential backoff
- Log API usage for monitoring
- Handle rate limits gracefully

**RSS Processing:**
- Use rss-parser with error handling
- Implement deduplication logic
- Store raw RSS data before processing
- Handle malformed feeds gracefully

### Testing Strategy

**Unit Tests:** Focus on utility functions and business logic
**Integration Tests:** Test Convex functions and API routes
**E2E Tests:** Critical user journeys (article creation, publishing flow)

### AI Assistance Guidelines

When working with Claude Code:
1. Always provide context about which part of the system you're working on
2. Reference this document's schema and patterns
3. Ask for code reviews focusing on TypeScript types and error handling
4. Request help with complex Convex queries and mutations
5. Get assistance with responsive design patterns using Tailwind

### Common Utilities

**Date Formatting:**
```typescript
export const formatDate = (timestamp: number) => 
  new Date(timestamp).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
```

**Slug Generation:**
```typescript
export const generateSlug = (title: string) =>
  title.toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)/g, '');
```

**API Response Types:**
```typescript
type APIResponse<T> = {
  data?: T;
  error?: string;
  code?: string;
};
```

## Business Logic

**Article Selection:** RSS items are prioritized by recency, category relevance, and source credibility
**Synthesis Rules:** Ensure source articles are recent (<48 hours), non-duplicate, and from credible sources
**Content Quality:** AI-generated articles must include proper citations, balanced perspectives, and factual accuracy

Remember: This is a news platform where accuracy and speed are crucial. Always prioritize data integrity and user experience in technical decisions.